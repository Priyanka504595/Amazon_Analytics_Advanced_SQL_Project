-- ---------------------------
-- Advanced Business Problems
-- ---------------------------

/*1. Top Selling Products
Query the top 10 products by total sales value.
Challenge: Include product name, total quantity sold, and total sales value. */
-- 1. View order items
SELECT * FROM order_items;
-- 2. Add a new column for total sales
ALTER TABLE order_items
ADD total_sales FLOAT;
-- 3. Populate the total_sales column
UPDATE order_items
SET total_sales = quantity * price_per_unit;
-- 4. View updated data sorted by quantity
SELECT * FROM order_items
ORDER BY quantity DESC;
-- 5. Top 10 Products by Total Sales
SELECT 
    oi.product_id,
    p.product_name,
    SUM(oi.total_sales) AS total_sales,
    COUNT(o.order_id) AS total_orders
FROM orders o
JOIN order_items oi ON oi.order_id = o.order_id
JOIN products p ON p.product_id = oi.product_id
GROUP BY oi.product_id, p.product_name
ORDER BY total_sales DESC
OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY;

/*
2. Revenue by Category
Calculate total revenue generated by each product category.
Challenge: Include the percentage contribution of each category to total revenue.
*/
SELECT 
    p.category_id,
    c.category_name,
    SUM(oi.total_sales) AS total_sales,
	SUM(oi.total_sales)/
	(select SUM(total_sales) from order_items) * 100 as contribution
FROM order_items AS oi
JOIN products AS p
    ON p.product_id = oi.product_id
LEFT JOIN category AS c
    ON c.category_id = p.category_id
GROUP BY p.category_id, c.category_name
ORDER BY total_sales DESC;


/*
3. Average Order Value (AOV)
Compute the average order value for each customer.
Challenge: Include only customers with more than 5 orders.
*/
select 
c.customer_id,
concat(c.first_name,' ',c.last_name) as full_name,
sum(total_sales)/ count(o.order_id) as AOV,
count(o.order_id) as total_orders
from orders as o
join 
customers as c
on c.customer_id = o.customer_id
join
order_items as oi
on oi.order_id=o.order_id
group by c.customer_id, c.first_name, c.last_name
having count(o.order_id) > 5

/*
4. Monthly Sales Trend
Query monthly total sales over the past two years.
Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!
*/
select 
 year,
 month,
 total_sales as current_month_sales,
 LAG(total_sales,1) over(order by year,month) as last_month_sale
 from
(SELECT 
    MONTH(o.order_date) AS month,
    YEAR(o.order_date) AS year,
    round(SUM(oi.total_sales),2) AS total_sales
FROM orders o
JOIN order_items oi ON oi.order_id = o.order_id
WHERE o.order_date >= DATEADD(YEAR, -2, CURRENT_TIMESTAMP)
GROUP BY YEAR(o.order_date), MONTH(o.order_date)
) as t1
ORDER BY year, month

/*
5. Customers with No Purchases
Find customers who have registered but never placed an order.
Challenge: List customer details and the time since their registration.
*/
--approach1
select * from customers
where customer_id not in(select distinct customer_id from orders);
--approach1
select * from customers as c
left join
orders as o
on o.customer_id=c.customer_id
where o.customer_id is NULL

/*
6. Least-Selling Categories by State
Identify the least-selling product category for each state.
Challenge: Include the total sales for that category within each state.
*/
with ranking_table as
(select 
c.state,
ca.category_name,
sum(oi.total_sales) as total_sales,
rank() over(partition by c.state order by sum(oi.total_sales) asc) as rank
from orders as o
join
customers as c 
on o.customer_id = c.customer_id
join
order_items as oi
on o.order_id=oi.order_id
join
products as p
on oi.product_id=p.product_id
join
category as ca
on p.category_id=ca.category_id
group by c.state, ca.category_name, oi.total_sales)
select * from ranking_table where rank =1


/*
7. Customer Lifetime Value (CLTV)
Calculate the total value of orders placed by each customer over their lifetime.
Challenge: Rank customers based on their CLTV.
*/
select 
c.customer_id,
concat(c.first_name,' ',c.last_name) as full_name,
sum(total_sales)/ count(o.order_id) as CLTV,
dense_rank() over(order by sum(total_sales) desc) as cs_ranking
from orders as o
join 
customers as c
on c.customer_id = o.customer_id
join
order_items as oi
on oi.order_id=o.order_id
group by c.customer_id, c.first_name, c.last_name

/*
8. Inventory Stock Alerts
Query products with stock levels below a certain threshold (e.g., less than 10 units).
Challenge: Include last restock date and warehouse information.
*/
select 
i.inventory_id,
p.product_name,
i.stock as  current_stock_left,
i.last_stock_date,
i.warehouse_id
from inventory as i
join
products as p
on p.product_id=i.product_id
where stock < 10

/*
9. Shipping Delays
Identify orders where the shipping date is later than 3 days after the order date.
Challenge: Include customer, order details, and delivery provider.
*/
SELECT 
    c.*,
	o.*,
	s.shipping_providers,
    DATEDIFF(DAY, o.order_date, s.shipping_date) AS days_to_ship
FROM orders o
JOIN customers c ON c.customer_id = o.customer_id
JOIN shipping s ON o.order_id = s.order_id
WHERE DATEDIFF(DAY, o.order_date, s.shipping_date) > 3;

/*
10. Payment Success Rate 
Calculate the percentage of successful payments across all orders.
Challenge: Include breakdowns by payment status (e.g., failed, pending).
*/
select 
p.payment_status,
count(*) as total_count,
count(*) * 100.0/(select count(*) from payments) as per
from orders as o
join
payments as p
on o.order_id=p.order_id
group by p.payment_status;


/*
11. Top Performing Sellers
Find the top 5 sellers based on total sales value.
Challenge: Include both successful and failed orders, and display their percentage of successful orders.
*/
with top_sellers as
(select TOP 5
s.seller_id,
s.seller_name,
sum(oi.total_sales) as total_sales
from orders as o
join 
sellers as s
on o.seller_id=s.seller_id
join
order_items as oi
on oi.order_id= o.order_id
group by s.seller_id,s.seller_name
order by total_sales desc 
),

seller_reports as 
(select o.seller_id, ts.seller_name, o.order_status,
count(*) as total_orders
from orders as o
join
top_sellers as ts
on ts.seller_id=o.seller_id
where o.order_status not in ('Inprogress', 'Returned')
group by o.seller_id,ts.seller_name,o.order_status)

select 
seller_id,
seller_name,
sum(case when order_status = 'Completed' then total_orders else 0 end) as Completed_orders,
sum(case when order_status = 'Cancelled' then total_orders else 0 end) as Cancelled_orders,
sum(total_orders) as total_order,
sum(case when order_status = 'Completed' then total_orders else 0 end) * 100.0 / sum(total_orders) as successful_orders_per
from seller_reports
group by seller_id, seller_name


/*
12. Product Profit Margin
Calculate the profit margin for each product (difference between price and cost of goods sold(cogs)).
Challenge: Rank products by their profit margin, showing highest to lowest.
*/
--group pid sum(total_sales -cogs*qty) as profit
-- profit margin = profit/total_sales
select 
product_id,
product_name,
profit_margin,
DENSE_RANK() over(order by profit_margin desc) as product_ranking
from(
select 
p.product_id,
p.product_name,
sum(total_sales - (p.cogs * oi.quantity))* 100/sum(total_sales) as profit_margin
from order_items as oi
join
products as p
on oi.product_id = oi.product_id
group by p.product_id,p.product_name) as t1

/*
13. Most Returned Products
Query the top 10 products by the number of returns.
Challenge: Display the return rate as a percentage of total units sold for each product.
*/
select TOP 10
p.product_id,
p.product_name,
count(*) as total_unit_sold,
sum(case when o.order_status = 'Returned' then 1 else 0 end) as total_returned,
sum(case when o.order_status = 'Returned' then 1 else 0 end) * 100.0 / count(*) as return_per
from order_items as oi
join
products as p
on oi.product_id = p.product_id
join
orders as o
on o.order_id=oi.order_id
group by p.product_id,p.product_name
order by return_per desc


/*
14. Orders Pending Shipment
Find orders that have been paid but are still pending shipment.
Challenge: Include order details, payment date, and customer information.
*/
SELECT 
    o.order_id,
    o.order_date,
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    p.payment_date,
    p.payment_status,
    s.delivery_status
FROM orders as o
JOIN payments as p ON o.order_id = p.order_id
JOIN customers as c ON c.customer_id = o.customer_id
JOIN shipping as s ON s.order_id = o.order_id
WHERE 
    p.payment_status = 'Payment Successed' AND s.delivery_status = 'Pending'
ORDER BY p.payment_date desc;

/*
15. Inactive Sellers
Identify sellers who haven’t made any sales in the last 10 months.
Challenge: Show the last sale date and total sales from those sellers.
*/
with cte1
as
(select * from sellers
where seller_id not in (select seller_id from orders where order_date >= DATEADD(MONTH, -10, GETDATE()))
)
select 
o.seller_id,
Max(o.order_date) as last_sale_date,
Max(oi.total_sales) as last_sale_amount
from orders as o
join
cte1 
on cte1.seller_id = o.seller_id
join order_items as oi
on o.order_id=oi.order_id
group by o.seller_id

/*
16. IDENTITY customers into returning or new
if the customer has done more than 5 return categorize them as returning otherwise new
Challenge: List customers id, name, total orders, total returns
*/
select 
full_name as customers,
total_orders,
total_returns,
case
when total_returns > 5 then 'Returning_customer' else 'New'
end as cx_category
from
(select 
concat(c.first_name,' ',c.last_name) as full_name,
count(o.order_id) as total_orders,
sum(case when o.order_status = 'Returned' then 1 else 0 end) as total_returns
from orders as o
join
customers as c
on c.customer_id=o.customer_id
join
order_items as oi
on oi.order_id=o.order_id
group by c.first_name, c.last_name) as cx_summary


/*
17. Top 5 Customers by Orders in Each State
Identify the top 5 customers with the highest number of orders for each state.
Challenge: Include the number of orders and total sales for each customer.
*/
select * from
(select 
concat(c.first_name,' ',c.last_name) as full_name,
c.state,
COUNT(o.order_id) as total_orders,
sum(total_sales) as total_slaes,
DENSE_RANK() over(partition by c.state order by count(o.order_id) desc) as rank
from orders as o
join 
order_items as oi
on oi.order_id=o.order_id
join 
customers as c
on c.customer_id=o.customer_id
group by c.first_name,c.last_name,c.state) as t1
where rank <= 5

/*
18. Revenue by Shipping Provider
Calculate the total revenue handled by each shipping provider.
Challenge: Include the total number of orders handled and the average delivery time for each provider.
*/
select
s.shipping_providers,
count(o.order_id) as order_handled,
sum(oi.total_sales) as total_sales,
COALESCE(AVG(DATEDIFF(DAY, s.return_date, s.shipping_date)),0) as average_days
from orders as o
join 
order_items as oi
on oi.order_id=o.order_id
join 
shipping as s
on s.order_id=o.order_id
group by s.shipping_providers;
--return_date VC(20)--

/*
19. Top 10 product with highest decreasing revenue ratio compare to last year(2023) and current_year(2024)
Challenge: Return product_id, product_name, category_name, 2023 revenue and 2024 revenue decrease ratio at end Round the result
Note: Decrease ratio = cr-ls/ls* 100 (cs = current_year ls=last_year)
*/
WITH last_year_sale AS (
    SELECT 
        p.product_id,
        p.product_name,
        SUM(oi.total_sales) AS revenue
    FROM orders o
    JOIN order_items oi ON oi.order_id = o.order_id
    JOIN products p ON p.product_id = oi.product_id
    WHERE YEAR(o.order_date) = 2023
    GROUP BY p.product_id, p.product_name),
current_year_sale AS (
    SELECT 
        p.product_id,
        p.product_name,
        SUM(oi.total_sales) AS revenue
    FROM orders o
    JOIN order_items oi ON oi.order_id = o.order_id
    JOIN products p ON p.product_id = oi.product_id
    WHERE YEAR(o.order_date) = 2024
    GROUP BY p.product_id, p.product_name)
SELECT TOP 10
    cs.product_id,
    ls.revenue AS last_year_revenue,
    cs.revenue AS current_year_revenue,
    ls.revenue - cs.revenue AS revenue_diff,
    ROUND((cs.revenue - ls.revenue) * 100.0 / ls.revenue, 2) AS revenue_dec_ratio
FROM last_year_sale as ls
JOIN current_year_sale as cs ON ls.product_id = cs.product_id
WHERE ls.revenue > cs.revenue
order by revenue_dec_ratio 